openapi: 3.0.1
info:
  title: Extractor API
  description: |
    [Return Home](/)

    # Overview

    Extractor API extracts clean text from articles, as well as details like title, author, images and more.

    “Clean” text refers to text without boilerplate - advertising copy, subscription solicitations (“Subscribe to our newsletter!”), comments in the comment section and so on. In other words, the article part of an article page.

    The API is specifically designed for long-form content, rather than short-form content like product descriptions, image captions, etc.

    ## API Key

    To authenticate the **Extractor** endpoint, simply include the `apikey` parameter in your request URL. For all **Job** endpoints, you will need to include the `Authorization` header followed by the `Bearer` keyword and your API key. The documentation includes examples for both forms of authentication.

    If you don’t have an API key, you can head over to the [Pricing](/extractor-api-pricing/) page to sign up for a Free Plan or start a 14-day trial for any of the paid plans. Afterwards you’ll be redirected to your [Dashboard](/extractor-api-dashboard/), which will display your API key.

    ## Rate Limits

    Depending on your plan, you’ll have a different [rate limit](/extractor-api-pricing/). If you go over your limit, you'll receive a **429 response code**.

    ## Base URL

    All API requests will need to include the following base URL. Also note that none of the endpoints here will need a forward slash at the end.

    `https://extractorapi.com/api/v1`

  version: 1.0.4

servers:
- url: https://extractorapi.com/api/v1
  description: Extractor API base URL

components:
  securitySchemes:
    APIKeyParam:
      type: apiKey
      name: apikey
      in: query
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: "Bearer YOUR_API_KEY"
  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                description: Description of the authorization error
            example:
              detail: Invalid token.

paths:
  /extractor:
    get:
      security:
      - APIKeyParam: []
      summary: Extractor
      description: Given a target URL, this endpoint returns extracted text and other useful data. Protocols ("http://" or "https://") for the `url` parameter are optional, as the API will automatically add "http://" if it doesn't detect one. Also note that sometimes (but not always), parameters within your target URL will give you issues, so it's best to remove them.
      x-code-samples:
      - lang: Python
        source: |
          import requests

          endpoint = "https://extractorapi.com/api/v1/extractor"
          params = {
            "apikey": "YOUR_API_KEY",
            "url": "example.com"
          }

          r = requests.get(endpoint, params=params)
          print(r.json())
      - lang: JavaScript
        source: |
          var Http = new XMLHttpRequest();
          var endpoint = "https://extractorapi.com/api/v1/extractor";
          var params = "apikey=YOUR_API_KEY&url=example.com"

          Http.open("GET", endpoint+"?"+params);
          Http.send();

          Http.onreadystatechange = (e) => {
            console.log(Http.responseText)
          }
      - lang: HTML
        label: HTTPie
        source: |
          http GET "https://extractorapi.com/api/v1/extractor?apikey=YOUR_API_KEY&url=example.com"
      parameters:
      - name: apikey
        in: query
        description: Your account's API key.
        required: true
        schema:
          type: string
          example: 90c972dba7fz32c3degp478bd328764ab200123
      - name: url
        in: query
        description: The target URL you want to extract text from. Adding protocols is optional (ex. "http://") - these will be added automatically if they are not provided. Try to avoid query parameters in your target URL as these may interfere with your actual parameters.
        required: true
        schema:
          type: string
          example: example.com
      - name: js
        in: query
        description: Enable JavaScript rendering. Uses 5 requests instead of the standard 1 request. Available only in paid plans.
        required: false
        schema:
          type: string
          example: true
      - name: wait
        in: query
        description: Used alongside the **js** parameter. Waits that many seconds before retrieving text content. Available only in paid plans.
        required: false
        schema:
          type: int
          example: 3
      - name: translate_from
        in: query
        description: Indicates the `text` output language you want to translate from. If you want to translate an extracted English article into French, `translate_from` would be `translate_from=en`. See the list of [language codes here](/getting-started#translate). Available only in paid plans.
        required: false
        schema:
          type: string
          example: en
      - name: translate_to
        in: query
        description: Indicates the language you want to translate your `text` output to. If you want to translate an extracted English article into French, `translate_to` would be `translate_to=fr`. See the list of [language codes here](/getting-started#translate). Available only in paid plans.
        required: false
        schema:
          type: string
          example: fr
      - name: fields
        in: query
        description: |
          An optional string of comma-seperated fields you want to display in the response. The **fields** parameter will always return the `url`, `status` and `text`, so there's no need to include them. If you don't include **fields**, your response will include all fields except for `raw_text`, `translated_title`, `translated_text` and `clean_html`.

          Allowed comma-seperated `fields`:

          * `domain`: The domain of your target URL
          * `title`: The title of the URL page
          * `author`: The author candidates
          * `date_published`: Date the content was published
          * `images`: List of images on the page
          * `videos`: List of videos on the page
          * `html`: The HTML of the response
          * `raw_text`: Page text, including boilerplate
          * `translated_title`: Translation of `title` output, requires `translate_from` and `translate_to` parameters
          * `translated_text`: Translation of `text` output, requires `translate_from` and `translate_to` parameters
          * `clean_html`: Sanitized HTML, constructed from extracted text

        required: false
        schema:
          type: string
          example:
          - images,translated_text
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: Your target URL
                  status:
                    type: string
                    description: The status of the request, in this case `COMPLETE`
                  domain:
                    type: string
                    description: The domain of your target URL
                  title:
                    type: string
                    description: The title of the URL page
                  author:
                    type: array
                    description: The author candidates
                    items:
                      type: string
                  date_published:
                    type: string
                    description: Date the content was published
                  images:
                    type: array
                    description: List of images on the page
                    items:
                      type: string
                  videos:
                    type: array
                    description: List of videos on the page
                    items:
                      type: string
                  text:
                    type: string
                    description: The extracted, boilerplate-free text
                  html:
                    type: html
                    description: The page's HTML
                example:
                  url: "http://example.com"
                  status: COMPLETE
                  domain: "example.com"
                  title: Example Article Title
                  author: [Author Candidate I, Author Candidate II]
                  date_published: "2030-01-01T08:40:51.620Z"
                  images: ["example.com/image_1.png", "example.com/image_2.png"]
                  videos: ["https://www.youtube.com/watch?v=3XAMPL3", "https://vimeo.com/42424242"]
                  text: Clean article text.
                  html: "<html><body>Clean article text.</body></html>"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: Your target URL
                  status:
                    type: string
                    description: The status of the request, in this case `ERROR`
                  details:
                    type: string
                    description: The reason for the Bad Request error
                example:
                  url: http://example.com
                  status: ERROR
                  details: There was an error connecting to the URL
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: Description of the authorization error
                example:
                  detail: Please check that you entered your API key correctly

  /search:
    get:
      security:
      - APIKeyParam: []
      summary: News Search
      description: Given a search term, this endpoint returns a list of up to 100 relevant news items. You can optionally add a language-country code to narrow down results.
      x-code-samples:
      - lang: Python
        source: |
          import requests

          endpoint = "https://extractorapi.com/api/v1/search"
          params = {
            "apikey": "YOUR_API_KEY",
            "search_term": "example"
          }

          r = requests.get(endpoint, params=params)
          print(r.json())
      - lang: JavaScript
        source: |
          var Http = new XMLHttpRequest();
          var endpoint = "https://extractorapi.com/api/v1/search";
          var params = "apikey=YOUR_API_KEY&search_term=example"

          Http.open("GET", endpoint+"?"+params);
          Http.send();

          Http.onreadystatechange = (e) => {
            console.log(Http.responseText)
          }
      - lang: HTML
        label: HTTPie
        source: |
          http GET "https://extractorapi.com/api/v1/search?apikey=YOUR_API_KEY&search_term=example"
      parameters:
      - name: apikey
        in: query
        description: Your account's API key.
        required: true
        schema:
          type: string
          example: 90c972dba7fz32c3degp478bd328764ab200123
      - name: search_term
        in: query
        description: The term you would like to search for. While more than one term (seperated by whitespaces) may work, it's advised to use a single term for best results.
        required: true
        schema:
          type: string
          example: example
      - name: location
        in: query
        description: A language-country code to narrow down your results. You can find the [list of usable language-country codes here](/getting-started#location).
        required: false
        schema:
          type: string
          example: en-US
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    description: The news article's title
                  url:
                    type: string
                    description: The news article's URL
                  summary:
                    type: string
                    description: A summary of the news article
                  site_name:
                    type: string
                    description: The news site's name
                  date_published:
                    type: string
                    description: The date the news article was published
                example:
                  title: Example Title
                  url: "http://example.com"
                  summary: "Example article summary."
                  site_name: Example Site Name
                  date_published: "2030-01-01T08:40:51.620Z"
  /table-extractor:
    get:
      security:
      - APIKeyParam: []
      summary: HTML Table Extractor
      description: Given a target URL, this endpoint returns extracted html table content in array format. Protocols ("http://" or "https://") for the `url` parameter are optional, as the API will automatically add "http://" if it doesn't detect one. Also note that sometimes (but not always), parameters within your target URL will give you issues, so it's best to remove them.
      x-code-samples:
      - lang: Python
        source: |
          import requests

          endpoint = "https://extractorapi.com/api/v1/table-extractor"
          params = {
            "apikey": "YOUR_API_KEY",
            "url": "example.com",
            "index": 0
          }

          r = requests.get(endpoint, params=params)
          print(r.json())
      - lang: JavaScript
        source: |
          var Http = new XMLHttpRequest();
          var endpoint = "https://extractorapi.com/api/v1/table-extractor";
          var params = "apikey=YOUR_API_KEY&url=example.com&index=0"

          Http.open("GET", endpoint+"?"+params);
          Http.send();

          Http.onreadystatechange = (e) => {
            console.log(Http.responseText)
          }
      - lang: HTML
        label: HTTPie
        source: |
          http GET "https://extractorapi.com/api/v1/table-extractor?apikey=YOUR_API_KEY&url=example.com&index=0"
      parameters:
      - name: apikey
        in: query
        description: Your account's API key.
        required: true
        schema:
          type: string
          example: 90c972dba7fz32c3degp478bd328764ab200123
      - name: url
        in: query
        description: The target URL you want to extract text from. Adding protocols is optional (ex. "http://") - these will be added automatically if they are not provided. Try to avoid query parameters in your target URL as these may interfere with your actual parameters.
        required: true
        schema:
          type: string
          example: example.com
      - name: index
        in: query
        description: Index of table you want to extract. It starts from 0 and default value is 0.
        required: false
        schema:
          type: integer
          example: 0
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: Table content including header and body. Each array item contains one row in the table.
                    items:
                      type: array
                      description: Each row in the table. The first row would be the header of table
                      items:
                        type: string
                example:
                  data: [["Rank", "Name", "Sport", "Country", "Total", "Salary/winnings", "Endorsements"], ["1", "Conor McGregor", "Mixed martial arts", "Republic of Ireland", "$180 million", "$22 million", "$158 million"], ["2", "Lionel Messi", "Association football", "Argentina", "$130 million", "$97 million", "$33 million"]]
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: Your target URL
                  status:
                    type: string
                    description: The status of the request, in this case `ERROR`
                  details:
                    type: string
                    description: The reason for the Bad Request error
                example:
                  url: http://example.com
                  status: ERROR
                  details: There was an error connecting to the URL
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: Description of the authorization error
                example:
                  detail: Please check that you entered your API key correctly


  /jobs:
    get:
      summary: List Jobs
      description: List all your current jobs (includes both your pending and complete jobs). Results are paginated, with a maximum of 50 jobs per page.
      security:
      - Bearer: []
      x-code-samples:
      - lang: Python
        source: |
          import requests

          endpoint = "https://extractorapi.com/api/v1/jobs"
          api_key = "YOUR_API_KEY"
          headers = {
            "Authorization": f"Bearer {api_key}"
          }

          r = requests.get(endpoint, headers=headers)
          print(r.json())
      - lang: JavaScript
        source: |
          var Http = new XMLHttpRequest();
          var apiKey = "YOUR_API_KEY"
          var endpoint = "https://extractorapi.com/api/v1/jobs";

          Http.open("GET", endpoint);
          Http.setRequestHeader(
             "Content-Type", "application/json"
          );
          Http.setRequestHeader(
             "Authorization", `Bearer ${apiKey}`
          );
          Http.send();

          Http.onreadystatechange = (e) => {
            console.log(Http.responseText)
          }
      - lang: HTML
        label: HTTPie
        source: |
          http GET https://extractorapi.com/api/v1/jobs \
                   Authorization:"Bearer YOUR_API_KEY"
      parameters:
      - name: job_name__contains
        in: query
        description: |
          Filter the results by the job name. `job_name__contains` looks for an exact match while `job_name__icontains` is case agnostic. The filter parameter should be prepended with `?`. For example, the full URL would look like this: `https://extractorapi.com/api/v1/jobs?job_name__contains=my_job`.
        required: false
        schema:
          type: string
          example: my_job
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: The number of results
                  next:
                    type: string
                    description: The next URL in the paginated results, if any
                  previous:
                    type: string
                    description: The previous URL in the paginated results, if any
                  results:
                    type: array
                    description: A list of your jobs
                    items:
                      type: object
                      description: A dictionary containing a job's details
                      properties:
                        id:
                          type: integer
                          description: Your job's ID - you'll need this if you want to check its progress
                        job_name:
                          type: string
                          description: The name you gave your job when you created it
                        process_date:
                          type: string
                          description: The date and time the job started processing
                        url_count:
                          type: integer
                          description: The number of URLs in the job
                example:
                  count: 2
                  next: https://extractorapi.com/api/v1/jobs?page=2
                  previous: null
                  results: [{id: 1, job_name: myJob1, process_date: "2030-01-02T08:40:51.620Z", url_count: 5}, {id: 2, job_name: myJob2, process_date: "2030-01-03T08:40:51.620Z", url_count: 10}]

        401:
          $ref: "#/components/responses/UnauthorizedError"

    post:
      summary: Create Job
      description: |
        Create a job and begin extracting text from the provided list of URLs. Jobs will persist on the server, meaning they don't block your workflow. You can periodically check the status of your job via the **Job Status** endpoint, or even head to your [Jobs page](/jobs/) to view the status of the job and download results in .json or .csv formats. **Note that you can add a maximum of 100 URLs to a job at a time - any more, and the list will be cut off at the hundreth URL**.
      security:
      - Bearer: []
      x-code-samples:
      - lang: Python
        source: |
          import requests

          api_key = "YOUR_API_KEY"
          endpoint = "https://extractorapi.com/api/v1/jobs"

          headers = {
              "Authorization": f"Bearer {api_key}"
          }
          data = {
            "job_name": "my_job",
            "url_list": [
                "example.com/article1",
                "example.com/article2"
            ]
          }

          r = requests.post(endpoint, headers=headers, json=data)
          print(r.json())
      - lang: JavaScript
        source: |
          var Http = new XMLHttpRequest();
          var apiKey = "YOUR_API_KEY"
          var endpoint = "https://extractorapi.com/api/v1/jobs";
          var data = {
            "job_name": "myJob",
            "url_list": [
              "example.com/article1",
              "example.com/article2"
            ]
          }

          Http.open("POST", endpoint);
          Http.setRequestHeader(
             "Content-Type", "application/json"
          );
          Http.setRequestHeader(
             "Authorization", `Bearer ${apiKey}`
          );
          Http.send(JSON.stringify(data));

          Http.onreadystatechange = (e) => {
            console.log(Http.responseText)
          }
      - lang: HTML
        label: HTTPie
        source: |
          http POST https://extractorapi.com/api/v1/jobs \
                    Authorization:"Bearer YOUR_API_KEY" \
                    job_name=myJob \
                    url_list:='["example.com/article1", "example.com/acrticle2"]'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                job_name:
                  type: string
                  description: The name of your job. Note that this has to be a job name you haven't used before or you'll get a **400** response.
                url_list:
                  type: array
                  description: List of URLs you'd like to extract text from. **100 URLs max - any more, and the list will be cut off**.
                  maximum: 100
                  items:
                    type: string
                    description: URL string, with or without the protocol (ex. "http://")
              example:
                job_name: "myJob"
                url_list: ["example.com/article1", "example.com/article2"]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: Your new job's ID - use this to check your job's status
                  job_name:
                    type: string
                    description: The name you gave your job
                example:
                  id: 2
                  job_name: my_job
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: The reason for the Bad Request error
                example:
                  detail: You already have a job named myJob!
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /jobs/{id}:
    get:
      summary: Job Status
      description: Retrieve a specific job and its completion status, using the job's ID.
      security:
      - Bearer: []
      x-code-samples:
      - lang: Python
        source: |
          import requests

          endpoint = "https://extractorapi.com/api/v1/jobs/1"
          api_key = "YOUR_API_KEY"
          headers = {
            "Authorization": f"Bearer {api_key}"
          }

          r = requests.get(endpoint, headers=headers)
          print(r.json())
      - lang: JavaScript
        source: |
          var Http = new XMLHttpRequest();
          var apiKey = "YOUR_API_KEY"
          var endpoint = "https://extractorapi.com/api/v1/jobs/1";

          Http.open("GET", endpoint);
          Http.setRequestHeader(
             "Content-Type", "application/json"
          );
          Http.setRequestHeader(
             "Authorization", `Bearer ${apiKey}`
          );
          Http.send();

          Http.onreadystatechange = (e) => {
            console.log(Http.responseText)
          }
      - lang: HTML
        label: HTTPie
        source: |
          http GET https://extractorapi.com/api/v1/jobs/1 \
                   Authorization:"Bearer YOUR_API_KEY"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The job's ID
                  job_name:
                    type: string
                    description: The name of the job
                  job_status:
                    type: object
                    description: A dictionary containing your progress information about the job
                    properties:
                      errors:
                        type: integer
                        description: The number of URLs that encountered an error during the extraction process
                      percent_complete:
                        type: integer
                        description: The percent of URLs processed, from 0 to 100
                      urls_processed:
                        type: integer
                        description: The number of URLs processed (not that processed could mean both a successful extraction and an error)
                  process_date:
                    type: string
                    description: The date and time the job started processing
                  url_count:
                    type: integer
                    description: The number of URLs in the job
                  urls:
                    type: array
                    description: A list of the job's URLs
                    items:
                      type: string
                      description: URL string, with or without the protocol (ex. "http://")
                example:
                  id: 1
                  job_name: my_job
                  job_status: {errors: 0, percent_complete: 100, urls_processed: 2}
                  process_date: "2030-01-02T08:40:51.620Z"
                  url_count: 2
                  urls: ["http://example.com/article1", "http://example.com/article2"]
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /jobs/{id}/urls:
    get:
      summary: Job URLs
      description: A job's paginated list of URLs, including the extracted text and details. By default, only 10 URL objects are displayed per page.
      security:
      - Bearer: []
      x-code-samples:
      - lang: Python
        source: |
          import requests

          endpoint = "https://extractorapi.com/api/v1/jobs/1/urls"
          api_key = "YOUR_API_KEY"
          headers = {
            "Authorization": f"Bearer {api_key}"
          }

          r = requests.get(endpoint, headers=headers)
          print(r.json())
      - lang: JavaScript
        source: |
          var Http = new XMLHttpRequest();
          var apiKey = "YOUR_API_KEY"
          var endpoint = "https://extractorapi.com/api/v1/jobs/1/urls";

          Http.open("GET", endpoint);
          Http.setRequestHeader(
             "Content-Type", "application/json"
          );
          Http.setRequestHeader(
             "Authorization", `Bearer ${apiKey}`
          );
          Http.send();

          Http.onreadystatechange = (e) => {
            console.log(Http.responseText)
          }
      - lang: HTML
        label: HTTPie
        source: |
          http GET https://extractorapi.com/api/v1/jobs/1/urls \
                   Authorization:"Bearer YOUR_API_KEY"
      parameters:
      - name: title__contains
        in: query
        description: |
          Filter the results by a keyword in the URL page title. `title__contains` looks for an exact match while `title__icontains` is case agnostic. The filter parameter should be prepended with `?`. For example, the full URL would look like this: `https://extractorapi.com/api/v1/jobs/1/urls?title__contains=Facebook`.
        required: false
        schema:
          type: string
          example: facebook
      - name: text__contains
        in: query
        description: |
          Filter the results by a keyword in the cleaned text of the URL. `text__contains` looks for an exact match while `text__icontains` is case agnostic. The filter parameter should be prepended with `?`. For example, the full URL would look like this: `https://extractorapi.com/api/v1/jobs/1/urls?text__icontains=acquisition`.
        required: false
        schema:
          type: string
          example: acquisition
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: The number of results
                  next:
                    type: string
                    description: The next URL in the paginated results, if any
                  previous:
                    type: string
                    description: The previous URL in the paginated results, if any
                  results:
                    type: array
                    description: A list of the URLs in your job
                    items:
                      type: object
                      description: A dictionary containing a URL's details
                      properties:
                        url:
                          type: string
                          description: The URL string
                        id:
                          type: integer
                          description: The URL ID
                        status:
                          type: string
                          description: The status of the request, either `COMPLETE` or `ERROR`
                        domain:
                          type: string
                          description: The domain of the URL
                        title:
                          type: string
                          description: The title of the URL page
                        author:
                          type: array
                          description: The author candidates
                          items:
                            type: string
                        date_published:
                          type: string
                          description: Date the content was published
                        images:
                          type: array
                          description: List of images on the page
                          items:
                            type: string
                        videos:
                          type: array
                          description: List of videos on the page
                          items:
                            type: string
                        text:
                          type: string
                          description: The extracted, boilerplate-free text
                example:
                  count: 2
                  next: https://extractorapi.com/api/v1/jobs/1/urls?page=2
                  previous: null
                  results: [{url: "http://example.com/article1", id: 5, status: COMPLETE, domain: "example.com", title: Example Article Title 1, author: [Author Candidate I, Author Candidate II], date_published: "2030-01-01T08:40:51.620Z", images: ["example.com/image.png"], videos: ["https://www.youtube.com/watch?v=1337HX0R", "https://vimeo.com/12345678"], text: Clean article text.}, {url: "http://example.com/article2", id: 6, status: COMPLETE, domain: example.com, title: Example Article Title 2, author: [Author Candidate I, Author Candidate II, Author Candidate III], date_published: "2030-01-02T08:40:51.620Z", images: ["example.com/image_1.png", "example.com/image_2.png"], videos: ["https://www.youtube.com/watch?v=3XAMPL3", "https://vimeo.com/42424242"], text: Clean article text.}]
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /jobs/{id}/urls/{id}:
    get:
      summary: URL Details
      description: |
        Retrieve a single URL and its extracted text and details from a particular job. This endpoint include two additional fields you won't get in the **Job URLs** endpoint: `html` and `raw_text`.
      security:
      - Bearer: []
      x-code-samples:
      - lang: Python
        source: |
          import requests

          endpoint = "https://extractorapi.com/api/v1/jobs/1/urls/6"
          api_key = "YOUR_API_KEY"
          headers = {
            "Authorization": f"Bearer {api_key}"
          }

          r = requests.get(endpoint, headers=headers)
          print(r.json())
      - lang: JavaScript
        source: |
          var Http = new XMLHttpRequest();
          var apiKey = "YOUR_API_KEY"
          var endpoint = "https://extractorapi.com/api/v1/jobs/1/urls/6";

          Http.open("GET", endpoint);
          Http.setRequestHeader(
             "Content-Type", "application/json"
          );
          Http.setRequestHeader(
             "Authorization", `Bearer ${apiKey}`
          );
          Http.send();

          Http.onreadystatechange = (e) => {
            console.log(Http.responseText)
          }
      - lang: HTML
        label: HTTPie
        source: |
          http GET https://extractorapi.com/api/v1/jobs/1/urls/6 \
                   Authorization:"Bearer YOUR_API_KEY"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: The URL string
                  id:
                    type: integer
                    description: The URL ID
                  status:
                    type: string
                    description: The status of the request, either `COMPLETE` or `ERROR`
                  domain:
                    type: string
                    description: The domain of the URL
                  title:
                    type: string
                    description: The title of the URL page
                  author:
                    type: array
                    description: The author candidates
                    items:
                      type: string
                  date_published:
                    type: string
                    description: Date the content was published
                  images:
                    type: array
                    description: List of images on the page
                    items:
                      type: string
                  videos:
                    type: array
                    description: List of videos on the page
                    items:
                      type: string
                  text:
                    type: string
                    description: The extracted, boilerplate-free text
                  html:
                    type: string
                    description: The full HTML of the URL page
                  raw_text:
                    type: string
                    description: The full text of the URL page, including boilerplate
                example:
                  url: "http://example.com"
                  id: 6
                  status: COMPLETE
                  domain: "example.com"
                  title: Example Article Title
                  author: [Author Candidate I, Author Candidate II]
                  date_published: "2030-01-01T08:40:51.620Z"
                  images: ["example.com/image_1.png", "example.com/image_2.png"]
                  videos: ["https://www.youtube.com/watch?v=3XAMPL3", "https://vimeo.com/42424242"]
                  text: Clean article text.
                  html: "<!DOCTYPE html><html lang='en'>...</html>"
                  raw_text: "ADVERTISEMENT. Rest of article text. Sign Up!"
        401:
          $ref: "#/components/responses/UnauthorizedError"
